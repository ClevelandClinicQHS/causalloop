rw %>%
group_by(loopIx) %>%
mutate(from=var, to=lead(var)) %>%
filter(!is.na(to)) %>%
select(loopIx, from, to)
rw %>%
group_by(loopIx) %>%
mutate(from=var, to=lead(var)) %>%
filter(!is.na(to)) %>%
select(loopIx, from, to) %>% print(n=10000)
edf
rw %>%
group_by(loopIx) %>%
mutate(from=var, to=lead(var)) %>%
filter(!is.na(to)) %>%
select(loopIx, from, to) %>%
left_join(select(edf, from, to, polarity), by=c("from", "to"))
rw %>%
group_by(loopIx) %>%
mutate(from=var, to=lead(var)) %>%
filter(!is.na(to)) %>%
select(loopIx, from, to) %>%
left_join(select(edf, from, to, polarity), by=c("from", "to")) %>% print(n=100)
x
plot(x)
nodeIxTable <- dplyr::select(x$nodes, node) %>%
dplyr::group_by(node) %>%
dplyr::filter(dplyr::row_number() == 1) %>%
dplyr::ungroup() %>%
dplyr::rename(from = node) %>%
dplyr::mutate(to = from,
nodeID = 1:n())
edf <- dplyr::select(x$edges, from, to, polarity) %>%
dplyr::left_join(nodeIxTable[,c("from","nodeID")], by = "from") %>%
dplyr::rename(fromID = nodeID) %>%
dplyr::left_join(nodeIxTable[,c("to","nodeID")], by = "to") %>%
dplyr::rename(toID = nodeID)
nodeID_graph <- igraph::graph_from_data_frame(edf[,c("fromID","toID")])
L <- map(nodeIxTable$nodeID, function(x) list(node=x))
nodeIxTable
doWalks <- function(l){
l$walks <- plyr::rlply(S,
as.numeric(igraph::random_walk(nodeID_graph,
start=l$node,
steps=walkLength)))
}
rw <- map(L, doWalks)
rw
edf
x
x$nodes
nodeIxTable <- dplyr::select(x$nodes, node) %>%
dplyr::group_by(node) %>%
dplyr::filter(dplyr::row_number() == 1) %>%
dplyr::ungroup() %>%
dplyr::rename(from = node) %>%
dplyr::mutate(to = from,
nodeID = 1:n())
edf <- dplyr::select(x$edges, from, to, polarity) %>%
dplyr::left_join(nodeIxTable[,c("from","nodeID")], by = "from") %>%
dplyr::rename(fromID = nodeID) %>%
dplyr::left_join(nodeIxTable[,c("to","nodeID")], by = "to") %>%
dplyr::rename(toID = nodeID)
nodeID_graph <- igraph::graph_from_data_frame(edf[,c("fromID","toID")])
plot(nodeID_graph)
labels(nodeID_graph)
nodeID_graph$names
nodeID_graph$name
names(nodeID_graph)
V(nodeID_graph)
igraph::V(nodeID_graph)
tibble(nodeID=1:length(nodeIxTable), actualNodeID = igraph::V(nodeID_graph))
tibble(nodeID=1:nrow(nodeIxTable), actualNodeID = igraph::V(nodeID_graph))
1:nrow(nodeIxTable)
igraph::V(nodeID_graph)
str(igraph::V(nodeID_graph))
tibble(nodeID=1:nrow(nodeIxTable), actualNodeID = attr(igraph::V(nodeID_graph), "names"))
tibble(nodeID=1:nrow(nodeIxTable), actualNodeID = as.numeric(attr(igraph::V(nodeID_graph), "names")))
rw <- rw %>% bind_rows() %>%
left_join(select(nodeIxTable, nodeID, from) %>% rename(var="from"), by="nodeID")
rw
rw <- map(L, doWalks)
rw <- unlist(rw, recursive = FALSE)
trimWalks <- function(v) {
endIx <- which(v[-1] == v[1])
if(length(endIx)>0) {
trimmedWalk <- v[1:(min(endIx)+1)]
return(trimmedWalk[!duplicated(trimmedWalk)])
} else return(endIx)
}
rw <- map(rw, trimWalks)
rw <- rw[map(rw,length)>0]
rotateLoop <- function(v){
minIx <- which.min(v)
if(minIx == 1) return(v) else return(v[c(minIx:length(v), 1:(minIx-1))])
}
rw <- map(rw, rotateLoop)
rw <- rw[!duplicated(rw)]
rw <- map(rw, function(v) c(v, v[1]))
rw <- map2(1:length(rw), rw, ~list(loopIx=..1, loop=..2))
rw <- map(rw, function(l) tibble::tibble(loopIx = l$loopIx, nodeID = l$loop))
rw <- rw %>% bind_rows() %>%
left_join(select(nodeIxTable, nodeID, from) %>% rename(var="from"), by="nodeID")
rw
rw <- map(L, doWalks)
rw <- unlist(rw, recursive = FALSE)
trimWalks <- function(v) {
endIx <- which(v[-1] == v[1])
if(length(endIx)>0) {
trimmedWalk <- v[1:(min(endIx)+1)]
return(trimmedWalk[!duplicated(trimmedWalk)])
} else return(endIx)
}
rw <- map(rw, trimWalks)
rw <- rw[map(rw,length)>0]
rotateLoop <- function(v){
minIx <- which.min(v)
if(minIx == 1) return(v) else return(v[c(minIx:length(v), 1:(minIx-1))])
}
rw <- map(rw, rotateLoop)
rw <- rw[!duplicated(rw)]
rw <- map(rw, function(v) c(v, v[1]))
rw <- map2(1:length(rw), rw, ~list(loopIx=..1, loop=..2))
rw <- map(rw, function(l) tibble::tibble(loopIx = l$loopIx, nodeID = l$loop))
rw <- rw %>% bind_rows()
rw
rw <- map(L, doWalks)
rw <- unlist(rw, recursive = FALSE)
trimWalks <- function(v) {
endIx <- which(v[-1] == v[1])
if(length(endIx)>0) {
trimmedWalk <- v[1:(min(endIx)+1)]
return(trimmedWalk[!duplicated(trimmedWalk)])
} else return(endIx)
}
rw <- map(rw, trimWalks)
rw <- rw[map(rw,length)>0]
rotateLoop <- function(v){
minIx <- which.min(v)
if(minIx == 1) return(v) else return(v[c(minIx:length(v), 1:(minIx-1))])
}
rw <- map(rw, rotateLoop)
rw <- rw[!duplicated(rw)]
rw <- map(rw, function(v) c(v, v[1]))
rw <- map2(1:length(rw), rw, ~list(loopIx=..1, loop=..2))
rw <- map(rw, function(l) tibble::tibble(loopIx = l$loopIx, nodeID = l$loop))
rw <- rw %>% bind_rows() %>%
left_join(tibble(nodeID=1:nrow(nodeIxTable),
actualNodeID = as.numeric(attr(igraph::V(nodeID_graph),
"names"))), by = "nodeID")
rw
rw <- map(L, doWalks)
rw <- unlist(rw, recursive = FALSE)
trimWalks <- function(v) {
endIx <- which(v[-1] == v[1])
if(length(endIx)>0) {
trimmedWalk <- v[1:(min(endIx)+1)]
return(trimmedWalk[!duplicated(trimmedWalk)])
} else return(endIx)
}
rw <- map(rw, trimWalks)
rw <- rw[map(rw,length)>0]
rotateLoop <- function(v){
minIx <- which.min(v)
if(minIx == 1) return(v) else return(v[c(minIx:length(v), 1:(minIx-1))])
}
rw <- map(rw, rotateLoop)
rw <- rw[!duplicated(rw)]
rw <- map(rw, function(v) c(v, v[1]))
rw <- map2(1:length(rw), rw, ~list(loopIx=..1, loop=..2))
rw <- map(rw, function(l) tibble::tibble(loopIx = l$loopIx, nodeID = l$loop))
rw <- rw %>% bind_rows() %>%
left_join(tibble(nodeID=1:nrow(nodeIxTable),
actualNodeID = as.numeric(attr(igraph::V(nodeID_graph),
"names"))), by = "nodeID") %>%
select(-nodeID) %>% rename(nodeID = "actualNodeID") %>%
left_join(select(nodeIxTable, nodeID, from) %>% rename(var="from"), by="nodeID")
rw <- rw %>%
group_by(loopIx) %>%
mutate(from=var, to=lead(var)) %>%
filter(!is.na(to)) %>%
select(loopIx, from, to) %>%
left_join(select(edf, from, to, polarity), by=c("from", "to"))
rw
rw %>% print(n=100)
rw <- map(L, doWalks)
rw <- unlist(rw, recursive = FALSE)
trimWalks <- function(v) {
endIx <- which(v[-1] == v[1])
if(length(endIx)>0) {
trimmedWalk <- v[1:(min(endIx)+1)]
return(trimmedWalk[!duplicated(trimmedWalk)])
} else return(endIx)
}
rw <- map(rw, trimWalks)
rw <- rw[map(rw,length)>0]
rotateLoop <- function(v){
minIx <- which.min(v)
if(minIx == 1) return(v) else return(v[c(minIx:length(v), 1:(minIx-1))])
}
rw <- map(rw, rotateLoop)
rw <- rw[!duplicated(rw)]
rw
rw <- map(L, doWalks)
rw <- unlist(rw, recursive = FALSE)
trimWalks <- function(v) {
endIx <- which(v[-1] == v[1])
if(length(endIx)>0) {
trimmedWalk <- v[1:(min(endIx)+1)]
return(trimmedWalk[!duplicated(trimmedWalk)])
} else return(endIx)
}
rw <- map(rw, trimWalks)
rw <- rw[map(rw,length)>0]
rotateLoop <- function(v){
minIx <- which.min(v)
if(minIx == 1) return(v) else return(v[c(minIx:length(v), 1:(minIx-1))])
}
rw <- map(rw, rotateLoop)
rw <- rw[!duplicated(rw)]
rw <- map(rw, function(v) c(v, v[1]))
rw <- map2(1:length(rw), rw, ~list(loopIx=..1, loop=..2))
rw <- map(rw, function(l) tibble::tibble(loopIx = l$loopIx, nodeID = l$loop))
rw <- rw %>% bind_rows() %>%
left_join(tibble(nodeID=1:nrow(nodeIxTable),
actualNodeID = as.numeric(attr(igraph::V(nodeID_graph),
"names"))), by = "nodeID") %>%
select(-nodeID) %>% rename(nodeID = "actualNodeID") %>%
left_join(select(nodeIxTable, nodeID, from) %>% rename(var="from"), by="nodeID")
rw <- rw %>%
group_by(loopIx) %>%
mutate(from=var, to=lead(var)) %>%
filter(!is.na(to)) %>%
select(loopIx, from, to) %>%
left_join(select(edf, from, to, polarity), by=c("from", "to"))
rw
rw %>% print(n=100)
rw %>% summarize(numNA = sum(is.na(polarity)))
rw %>% summarize(anyNA = max(is.na(polarity)))
rw <- left_join(rw, (rw %>% summarize(anyNA = max(is.na(polarity)))), by="loopIx") %>%
filter(anyNA == 0)
rw
rw %>% print(n=100)
rw <- map(L, doWalks)
rw <- map(L, doWalks)
rw <- unlist(rw, recursive = FALSE)
trimWalks <- function(v) {
endIx <- which(v[-1] == v[1])
if(length(endIx)>0) {
trimmedWalk <- v[1:(min(endIx)+1)]
return(trimmedWalk[!duplicated(trimmedWalk)])
} else return(endIx)
}
rw <- map(rw, trimWalks)
rw <- rw[map(rw,length)>0]
rotateLoop <- function(v){
minIx <- which.min(v)
if(minIx == 1) return(v) else return(v[c(minIx:length(v), 1:(minIx-1))])
}
rw <- map(rw, rotateLoop)
rw <- rw[!duplicated(rw)]
rw <- map(rw, function(v) c(v, v[1]))
rw <- map2(1:length(rw), rw, ~list(loopIx=..1, loop=..2))
rw <- map(rw, function(l) tibble::tibble(loopIx = l$loopIx, nodeID = l$loop))
rw <- rw %>% bind_rows() %>%
left_join(tibble(nodeID=1:nrow(nodeIxTable),
actualNodeID = as.numeric(attr(igraph::V(nodeID_graph),
"names"))), by = "nodeID") %>%
select(-nodeID) %>% rename(nodeID = "actualNodeID") %>%
left_join(select(nodeIxTable, nodeID, from) %>% rename(var="from"), by="nodeID")
rw <- rw %>%
group_by(loopIx) %>%
mutate(from=var, to=lead(var)) %>%
filter(!is.na(to)) %>%
select(loopIx, from, to) %>%
left_join(select(edf, from, to, polarity), by=c("from", "to"))
rw <- left_join(rw, (rw %>% summarize(anyNA = max(is.na(polarity)))), by="loopIx") %>%
filter(anyNA == 0) %>%
select(-anyNA) %>%
ungroup() %>%
mutate(lagLoopIx = lag(loopIx), leadLoopIx = lead(loopIx))
rw
glps <- function(x, S = 100, walkLength=10){
nodeIxTable <- dplyr::select(x$nodes, node) %>%
dplyr::group_by(node) %>%
dplyr::filter(dplyr::row_number() == 1) %>%
dplyr::ungroup() %>%
dplyr::rename(from = node) %>%
dplyr::mutate(to = from,
nodeID = 1:n())
edf <- dplyr::select(x$edges, from, to, polarity) %>%
dplyr::left_join(nodeIxTable[,c("from","nodeID")], by = "from") %>%
dplyr::rename(fromID = nodeID) %>%
dplyr::left_join(nodeIxTable[,c("to","nodeID")], by = "to") %>%
dplyr::rename(toID = nodeID)
nodeID_graph <- igraph::graph_from_data_frame(edf[,c("fromID","toID")])
L <- map(nodeIxTable$nodeID, function(x) list(node=x))
doWalks <- function(l){
l$walks <- plyr::rlply(S,
as.numeric(igraph::random_walk(nodeID_graph,
start=l$node,
steps=walkLength)))
}
rw <- map(L, doWalks)
rw <- unlist(rw, recursive = FALSE)
trimWalks <- function(v) {
endIx <- which(v[-1] == v[1])
if(length(endIx)>0) {
trimmedWalk <- v[1:(min(endIx)+1)]
return(trimmedWalk[!duplicated(trimmedWalk)])
} else return(endIx)
}
rw <- map(rw, trimWalks)
rw <- rw[map(rw,length)>0]
rotateLoop <- function(v){
minIx <- which.min(v)
if(minIx == 1) return(v) else return(v[c(minIx:length(v), 1:(minIx-1))])
}
rw <- map(rw, rotateLoop)
rw <- rw[!duplicated(rw)]
rw <- map(rw, function(v) c(v, v[1]))
rw <- map2(1:length(rw), rw, ~list(loopIx=..1, loop=..2))
rw <- map(rw, function(l) tibble::tibble(loopIx = l$loopIx, nodeID = l$loop))
rw <- rw %>% bind_rows() %>%
left_join(tibble(nodeID=1:nrow(nodeIxTable),
actualNodeID = as.numeric(attr(igraph::V(nodeID_graph),
"names"))), by = "nodeID") %>%
select(-nodeID) %>% rename(nodeID = "actualNodeID") %>%
left_join(select(nodeIxTable, nodeID, from) %>% rename(var="from"), by="nodeID")
rw <- rw %>%
group_by(loopIx) %>%
mutate(from=var, to=lead(var)) %>%
filter(!is.na(to)) %>%
select(loopIx, from, to) %>%
left_join(select(edf, from, to, polarity), by=c("from", "to"))
rw <- left_join(rw, (rw %>% summarize(anyNA = max(is.na(polarity)))), by="loopIx") %>%
filter(anyNA == 0) %>%
select(-anyNA) %>%
ungroup() #%>%
#mutate(lagLoopIx = lag(loopIx), leadLoopIx = lead(loopIx))
rw
}
key <- "1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4"
gsk <- gs_key(key)
makeIt <- function(ws){
d <- gs_read(ss=gsk, ws=ws)
names(d) <- tolower(names(d))
d <- d[!is.na(d$from),]
d <- as.data.frame(d)
d <- d[!duplicated(d[,c("from","to")]),]
CLD(d$from, d$to, d$polarity)
}
h <- makeIt("relationships_MASTER");   plot(h)
plot(h)
glps <- function(x, S = 100, walkLength=10){
nodeIxTable <- dplyr::select(x$nodes, node) %>%
dplyr::group_by(node) %>%
dplyr::filter(dplyr::row_number() == 1) %>%
dplyr::ungroup() %>%
dplyr::rename(from = node) %>%
dplyr::mutate(to = from,
nodeID = 1:n())
edf <- dplyr::select(x$edges, from, to, polarity) %>%
dplyr::left_join(nodeIxTable[,c("from","nodeID")], by = "from") %>%
dplyr::rename(fromID = nodeID) %>%
dplyr::left_join(nodeIxTable[,c("to","nodeID")], by = "to") %>%
dplyr::rename(toID = nodeID)
nodeID_graph <- igraph::graph_from_data_frame(edf[,c("fromID","toID")])
L <- map(nodeIxTable$nodeID, function(x) list(node=x))
doWalks <- function(l){
l$walks <- plyr::rlply(S,
as.numeric(igraph::random_walk(nodeID_graph,
start=l$node,
steps=walkLength)))
}
rw <- map(L, doWalks)
rw <- unlist(rw, recursive = FALSE)
trimWalks <- function(v) {
endIx <- which(v[-1] == v[1])
if(length(endIx)>0) {
trimmedWalk <- v[1:(min(endIx)+1)]
return(trimmedWalk[!duplicated(trimmedWalk)])
} else return(endIx)
}
rw <- map(rw, trimWalks)
rw <- rw[map(rw,length)>0]
rotateLoop <- function(v){
minIx <- which.min(v)
if(minIx == 1) return(v) else return(v[c(minIx:length(v), 1:(minIx-1))])
}
rw <- map(rw, rotateLoop)
rw <- rw[!duplicated(rw)]
rw <- map(rw, function(v) c(v, v[1]))
rw <- map2(1:length(rw), rw, ~list(loopIx=..1, loop=..2))
rw <- map(rw, function(l) tibble::tibble(loopIx = l$loopIx, nodeID = l$loop))
rw <- rw %>% bind_rows() %>%
left_join(tibble(nodeID=1:nrow(nodeIxTable),
actualNodeID = as.numeric(attr(igraph::V(nodeID_graph),
"names"))), by = "nodeID") %>%
select(-nodeID) %>% rename(nodeID = "actualNodeID") %>%
left_join(select(nodeIxTable, nodeID, from) %>% rename(var="from"), by="nodeID")
rw <- rw %>%
group_by(loopIx) %>%
mutate(from=var, to=lead(var)) %>%
filter(!is.na(to)) %>%
select(loopIx, from, to) %>%
left_join(select(edf, from, to, polarity), by=c("from", "to"))
rw <- left_join(rw, (rw %>% summarize(anyNA = max(is.na(polarity)))), by="loopIx") %>%
filter(anyNA == 0) %>%
select(-anyNA) %>%
ungroup() #%>%
#mutate(lagLoopIx = lag(loopIx), leadLoopIx = lead(loopIx))
rw
}
loops <- glps(h, S=200, walkLength=15)
loops
loops %>% print(n=200)
getwd()
write_csv(loops, path="/Users/daltonj/Google Drive/projects/freedman/foodNest/CLDs/feedbackLoops.csv")
loops
group_by(loops, loopIx) %>% summarize(polarityProduct = prod(polarity))
group_by(loops, loopIx) %>% summarize(polarityProduct = prod(polarity)) %>% left_join(tibble(polarityProduct=c(-1,1), loopType=c("Balancing","Reinforcing")))
group_by(loops, loopIx) %>% summarize(polarityProduct = prod(polarity)) %>% left_join(tibble(polarityProduct=c(-1,1), loopType=c("Balancing","Reinforcing"))) %>% print(n=1000)
loops
loops %>% print(n=100000)
group_by(loops, loopIx) %>% summarize(polarityProduct = prod(polarity)) %>% left_join(tibble(polarityProduct=c(-1,1), loopType=c("Balancing","Reinforcing"))) %>% print(n=1000)
group_by(loops, loopIx) %>% summarize(polarityProduct = prod(polarity)) %>% left_join(tibble(polarityProduct=c(-1,1), loopType=c("Balancing","Reinforcing")))
group_by(loops, loopIx) %>% summarize(polarityProduct = prod(polarity)) %>% left_join(tibble(polarityProduct=c(-1,1), loopType=c("Balancing","Reinforcing"))) %>% write_csv(path="/Users/daltonj/Google Drive/projects/freedman/foodNest/CLDs/loopPolarity.csv")
glps <- function(x, S = 100, walkLength=10){
nodeIxTable <- dplyr::select(x$nodes, node) %>%
dplyr::group_by(node) %>%
dplyr::filter(dplyr::row_number() == 1) %>%
dplyr::ungroup() %>%
dplyr::rename(from = node) %>%
dplyr::mutate(to = from,
nodeID = 1:n())
edf <- dplyr::select(x$edges, from, to, polarity) %>%
dplyr::left_join(nodeIxTable[,c("from","nodeID")], by = "from") %>%
dplyr::rename(fromID = nodeID) %>%
dplyr::left_join(nodeIxTable[,c("to","nodeID")], by = "to") %>%
dplyr::rename(toID = nodeID)
nodeID_graph <- igraph::graph_from_data_frame(edf[,c("fromID","toID")])
L <- map(nodeIxTable$nodeID, function(x) list(node=x))
doWalks <- function(l){
l$walks <- plyr::rlply(S,
as.numeric(igraph::random_walk(nodeID_graph,
start=l$node,
steps=walkLength)))
}
rw <- map(L, doWalks)
rw <- unlist(rw, recursive = FALSE)
trimWalks <- function(v) {
endIx <- which(v[-1] == v[1])
if(length(endIx)>0) {
trimmedWalk <- v[1:(min(endIx)+1)]
return(trimmedWalk[!duplicated(trimmedWalk)])
} else return(endIx)
}
rw <- map(rw, trimWalks)
rw <- rw[map(rw,length)>0]
rotateLoop <- function(v){
minIx <- which.min(v)
if(minIx == 1) return(v) else return(v[c(minIx:length(v), 1:(minIx-1))])
}
rw <- map(rw, rotateLoop)
rw <- rw[!duplicated(rw)]
rw <- map(rw, function(v) c(v, v[1]))
rw <- map2(1:length(rw), rw, ~list(loopIx=..1, loop=..2))
rw <- map(rw, function(l) tibble::tibble(loopIx = l$loopIx, nodeID = l$loop))
rw <- rw %>% bind_rows() %>%
left_join(tibble(nodeID=1:nrow(nodeIxTable),
actualNodeID = as.numeric(attr(igraph::V(nodeID_graph),
"names"))), by = "nodeID") %>%
select(-nodeID) %>% rename(nodeID = "actualNodeID") %>%
left_join(select(nodeIxTable, nodeID, from) %>% rename(var="from"), by="nodeID")
rw <- rw %>%
group_by(loopIx) %>%
mutate(from=var, to=lead(var)) %>%
filter(!is.na(to)) %>%
select(loopIx, from, to) %>%
left_join(select(edf, from, to, polarity), by=c("from", "to"))
rw <- left_join(rw, (rw %>% summarize(anyNA = max(is.na(polarity)))), by="loopIx") %>%
filter(anyNA == 0) %>%
select(-anyNA) %>%
ungroup() #%>%
#mutate(lagLoopIx = lag(loopIx), leadLoopIx = lead(loopIx))
rw
}
library(causalloop)
library(tidyverse)
library(googlesheets)
key <- "1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4"
gsk <- gs_key(key)
makeIt <- function(ws){
d <- gs_read(ss=gsk, ws=ws)
names(d) <- tolower(names(d))
d <- d[!is.na(d$from),]
d <- as.data.frame(d)
d <- d[!duplicated(d[,c("from","to")]),]
CLD(d$from, d$to, d$polarity)
}
h <- makeIt("relationships_MASTER");   plot(h)
loops <- glps(h, S=200, walkLength=5)
loops
loops %>% write_csv("/Users/daltonj/Google Drive/projects/freedman/foodNest/CLDs/feedbackLoops-small.csv")
group_by(loops, loopIx) %>% summarize(polarity=prod(polarity)) %>% left_join(tibble(polarity=c(-1,1), loopType=c("Balancing","Reinforcing")))
group_by(loops, loopIx) %>% summarize(polarity=prod(polarity)) %>% left_join(tibble(polarity=c(-1,1), loopType=c("Balancing","Reinforcing"))) %>% write_csv("/Users/daltonj/Google Drive/projects/freedman/foodNest/CLDs/loopTypes-small.csv")
loops <- glps(h, S=200, walkLength=6)
loops %>% write_csv("/Users/daltonj/Google Drive/projects/freedman/foodNest/CLDs/feedbackLoops-small.csv")
group_by(loops, loopIx) %>% summarize(polarity=prod(polarity)) %>% left_join(tibble(polarity=c(-1,1), loopType=c("Balancing","Reinforcing"))) %>% write_csv("/Users/daltonj/Google Drive/projects/freedman/foodNest/CLDs/loopTypes-small.csv")
group_by(loops, loopIx) %>% summarize(polarity=prod(polarity)) %>% left_join(tibble(polarity=c(-1,1), loopType=c("Balancing","Reinforcing")))
group_by(loops, loopIx) %>% summarize(polarity=prod(polarity)) %>% left_join(tibble(polarity=c(-1,1), loopType=c("Balancing","Reinforcing"))) %>% print(n=100)
