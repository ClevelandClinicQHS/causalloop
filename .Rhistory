edfToCLD(tibble(from=c("a","a"), to=c("b","c"), polarity=-1), polarity=1)
roxygen2::roxygenize()
edfToCLD(tibble(from=c("a","a"), to=c("b","c"), polarity=-1), polarity=1)
library(causalloop)
edfToCLD(tibble(from=c("a","a"), to=c("b","c"), polarity=-1), polarity=1)
edfToCLD(data.frame(from="a", to=c("b","c")))
edfToCLD(data.frame(from="a", to=c("b","c"), stringAsFactors=FALSE))
z=data.frame(from="a", to=c("b","c"), stringAsFactors=FALSE)
str(z)
?data.frame
edfToCLD(data.frame(from="a", to=c("b","c"), stringsAsFactors=FALSE))
roxygen2::roxygenize()
?edfToCLD
roxygen2::roxygenize()
roxygen2::roxygenize()
library(causalloop)
?edfToCLD
roxygen2::roxygenize()
?edfToCLD
library(causalloop)
?edfToCLD
roxygen2::roxygenize()
library(causalloop)
?edfToCLD
roxygen2::roxygenize()
library(causalloop)
?edfToCLD
edfToCLD(tibble(from=c("a","a"), to=c("b","c"), polarity=-1), polarity=1)
help("CLD")
roxygen2::roxygenize()
library(causalloop)
L <- CLD(from=c("a","a","c"), to=c("b","c","a"))
L <- setEdgeFormat(L, property="color", polarity=-1, value="midnightblue")
L
L <- CLD(from=c("a","a","c"), to=c("b","c","a")) %>%
setEdgeFormat(L, property="color", polarity=-1, value="midnightblue")
library(magrittr)
L <- CLD(from=c("a","a","c"), to=c("b","c","a")) %>%
setEdgeFormat(L, property="color", polarity=-1, value="midnightblue")
L <- CLD(from=c("a","a","c"), to=c("b","c","a")) %>%
setEdgeFormat(property="color", polarity=-1, value="midnightblue")
L
L <- NULL
library(causalloop)
L <- CLD(from=c("a","a","c"), to=c("b","c","a")) %>%
setEdgeFormat(property="color", polarity=-1, value="midnightblue")
L
# Just put your dishIDs here and run the program
dishIDs <- c(62,45,49,38,63)
excludedDishIDs <- c(22,4)
excludedIngredients <- c();# c(30,33,130,41,10,11,6,134,93,98,131,49)
#--------------------------------------------------------------------
require(XLConnect);  require(reshape2);
setwd("~/Google Drive/personal/meals")
#setwd("C:/Users/daltonj/Google Drive/personal/meals")
source("r/makeMenu.R")
source("r/makeGroceryList.R")
source("r/load_data.R")
FN <- paste("Grocery List ",Sys.Date(),".txt",sep="")
fileConn<-file(FN);
writeLines(makeGroceryList(dishIDs,excludedDishIDs,excludedIngredients,Sys.Date()), fileConn);
close(fileConn)
library(causalloop)
ddply
?ddply
roxygen2::roxygenize()
roxygen2::roxygenize()
library(causalloop)
?setEdgeFormat
L <- CLD(from=c("a","a","c"), to=c("b","c","a")) %>%
setEdgeFormat("color", "midnightblue", polarity=-1) %>%
setNodeFormat("fillcolor", "yellow")
L
roxygen2::roxygenize()
library(causalloop)
?setEdgeFormat
roxygen2::roxygenize()
library(causalloop)
?setEdgeFormat
roxygen2::roxygenize()
library(causalloop)
?setEdgeFormat
roxygen2::roxygenize()
roxygen2::roxygenize()
library(causalloop)
?setEdgeFormat
L <- CLD(from=c("a","a","c"), to=c("b","c","a")) %>%
setEdgeFormat("color", "midnightblue", polarity=-1) %>%
setNodeFormat("fillcolor", "yellow")
L
roxygen2::roxygenize()
library(causalloop)
?setNodeFormat
?create_graph
?DiagrammeR::create_graph
DiagrammeR::creat_graph(nodes_df = letters[1:5])
DiagrammeR::create_graph(nodes_df = letters[1:5])
DiagrammeR::create_graph(nodes_df = data.frame(nodes=letters[1:5]))
DiagrammeR::create_graph(nodes_df = data.frame(nodes=letters[1:5]))
letters[1:5]
data.frame(nodes=letters[1:5])
create_node_df(n = 4)
DiagrammeR::create_node_df(n = 4)
library(DiagrammeR)
create_node_df(n=5, label=letters[1:5])
create_node_df(n=5, label=letters[1:5], shape="rectangle")
edf <- create_edge_df(c(1,1,2,3), c(2,3,3,4))
ndf <- create_node_df(n=5, label=letters[1:5], shape="rectangle")
g <- create_graph(ndf, edf)
g
ndf <- create_node_df(n=5, label=letters[1:5], shape="rectangle")
edf <- create_edge_df(c(1,1,2,3), c(2,3,3,6))
g <- create_graph(ndf, edf)
g
summary(g)
g
str(g)
g <- create_graph(edf)
g
get_node_df(g)
plot(g)
render_graph(g)
g <- create_graph(edges_df = edf)
g
render_graph(g)
install.packages("googlesheets")
library(googlesheets)
gs_key("1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4")
gs_key("2PACX-1vRHn8X2GagfPfx4LzZD7qYv0mvAP07BuN_2KeqrdZYX3OcIKu5yyNJEdr8kZss-fkoAjptVv39rRPV6")
gs_key("1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4")
gs_key("1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4")
gs_key("1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4")
library(googlesheets)
gs_key("1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4")
library(causalloop)
L <- CLD(from=c("a","a","c"), to=c("b","c","a"))
L
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L
CLD <- function(from, to, polarity=1, weight=1){
#set up edge tibble
edf <- processEdgeInput(from, to)
if(!(length(polarity) %in% c(1, nrow(edf)))){
stop("'polarity' must be length 1 or length equal to that of 'from' and 'to")
}
if(!(is.numeric(polarity) && all(unique(polarity) %in% c(-1,1)))){
stop("polarity must contain values in c(-1,1) *only*.")
}
edf$polarity <- polarity
if(!(length(weight) %in% c(1, nrow(edf)))){
stop("'weight' must be length 1 or length equal to that of 'from' and 'to")
}
if(!(is.numeric(weight) && all(unique(weight) > 0))){
stop("weight must contain positive values *only*.")
}
edf$weight <- weight
#set up default edge and node formats
efmt <- tibble(polarity    = c(-1,1),
style       = c("solid","dotted"),
color       = c("ForestGreen","red"),
arrowhead   = c("vee","box"),
penwidthAdj = c(1,5))
nfmt = tibble(group      = "",
shape      = "rectangle",
style      = "transparent",
color      = "transparent",
fillcolor  = "transparent",
fontname   = "Arial Narrow",
fontcolor  = "black",
height     = 0.5,
width      = 0.7)
nodes <- sort(unique(c(edf$from, edf$to)))
ndf <- tibble(node=nodes, gp="")
L <- list(edges=edf, nodes=ndf, formats=list(edge=efmt, node=nfmt))
class(L) <- "CLD"
return(L)
}
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), gp=c("I","","II","I"))
ndat <- tibble::tibble(node=c("c","d","e","f"), gp=c("I","","II","I"))
L <- addNodeDataToCLD(L, ndat)
roxygen2::roxygenize()
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), gp=c("I","","II","I"))
L <- addNodeDataToCLD(L, ndat)
L
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I","","II","I"))
L <- addNodeDataToCLD(L, ndat)
L$nodes #note the updating behavior
CLD <- L
ndf <- ndat
ndat
stopifnot(class(CLD) == "CLD")
stopifnot(is.data.frame(ndf))
stopifnot("node" %in% names(ndf))
stopifnot(is.character(ndf$node))
nodes <- ndf$node
if("group" %in% names(ndf)){
stopifnot(is.character(ndf$group))
gps <- ndf$group
} else {
warning("No 'group' variable specified in parameter 'ndf'. Setting to \"default\".")
gps <- rep("", length(nodes))
}
newNodeData <- tibble(node=nodes, gp=gps)
newNodeData
replace
CLD$nodes %>%
filter(!(node %in% nodes)) %>%
bind_rows(newNodeData)
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I","","II","I"))
L <- addNodeDataToCLD(L, ndat)
L$nodes #note the updating behavior
roxygen2::roxygenize()
library(causalloop)
roxygen2::roxygenize()
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
L
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I","","II","I"))
L <- addNodeDataToCLD(L, ndat)
L$nodes #note the updating behavior
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I","","II","I"))
L <- addNodeDataToCLD(L, ndat)
L$nodes #note the updating behavior
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
L$nodes #note updating behavior - also that the missing value gets mapped to "default"
L
library(causalloop)
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
L$nodes #note updating behavior - also that the missing value gets mapped to "default"
M <- addNodeDataToCLD(L, ndat, replace=TRUE) #produces error
L
i=1
ngp=1
for(i in 2:ngp) i
for(i in 2:ngp) print(i)
CLD=L
CLD$formats$node
CLD$formats$node[group == "default",] %>% mutate(dummy=1)
CLD$formats$node %>% select(group == "default") %>% mutate(dummy=1)
CLD$formats$node %>% filter(group == "default") %>% mutate(dummy=1)
tmp <- CLD$formats$node %>%
filter(group == "default") %>%
mutate(dummy=1) %>%
select(-group)
newNodeData <- left_join(tibble(group=group, dummy=1), tmp)
stopifnot(class(CLD) == "CLD")
stopifnot(is.character(group))
group <- unique(group)
tmp <- CLD$formats$node %>%
filter(group == "default") %>%
mutate(dummy=1) %>%
select(-group)
group = c("A","B","J")
stopifnot(class(CLD) == "CLD")
stopifnot(is.character(group))
group <- unique(group)
tmp <- CLD$formats$node %>%
filter(group == "default") %>%
mutate(dummy=1) %>%
select(-group)
newNodeData <- left_join(tibble(group=group, dummy=1), tmp)
newNodeData
stopifnot(class(CLD) == "CLD")
stopifnot(is.character(group))
group <- unique(group)
tmp <- CLD$formats$node %>%
filter(group == "default") %>%
mutate(dummy=1) %>%
select(-group)
newNodeData <- left_join(tibble(group=group, dummy=1), tmp) %>% select(-dummy)
newNodeData
for(nattrib %in% names(newNodeData))
for(nattrib in names(newNodeData)) print(nattrib)
zzz <- tibble(group=group)
zz
zzz
nattrib
zz[,nattrib] <- 1:3
zzz[,nattrib] <- 1:3
zzz
group
CLD
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
L
addNodeGroupFormat(L, group=c("I","II"), fillcolor="yellow", shape=c("rectangle","ellipse"))
roxygen2::roxygenize()
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
addNodeGroupFormat(L, group=c("I","II"), fillcolor="yellow", shape=c("rectangle","ellipse"))
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
addNodeGroupFormat(L, group=c("I","II"), fillcolor="yellow", shape=c("rectangle","ellipse"))
?select_
?select
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
addNodeGroupFormat(L, group=c("I","II"), fillcolor="yellow", shape=c("rectangle","ellipse"))
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
addNodeGroupFormat(L, group=c("I","II"), fillcolor="yellow", shape=c("rectangle","ellipse"))
`...` <- list(fillcolor="yellow", shape=c("rectangle","ellipse"))
`...`
dots <- list(fillcolor="yellow", shape=c("rectangle","ellipse"))
CLD <- L
group <- c("I","II")
stopifnot(class(CLD) == "CLD")
stopifnot(is.character(group))
group <- unique(group)
tmp <- CLD$formats$node %>%
filter(group == "default") %>%
mutate(dummy=1) %>%
select(-group)
newNodeData <- left_join(tibble(group=group, dummy=1), tmp) %>% select(-dummy)
nattribNames <- c("shape","style","color","fillcolor",
"fontname","fontcolor","height","width")
dots <- dots[names(dots) %in% nattribNames]
dots
names(dots)[1]
nattrib <- names(dots)[1]
nattribVals <- dots[[nattrib]]
nattribVals
stopifnot(is.vector(nattribVals))
stopifnot(length(nattribVals) %in% c(1,length(group)))
tmp <- tibble(group=group)
tmp[,nattrib] <- nattribVals
tmp
newNodeData
newNodeData %>% select(-nattrib) %>% left_join(tmp)
newNodeData[,-nattrib] %>% left_join(tmp)
newNodeData[,-c(nattrib)] %>% left_join(tmp)
nattrib
newNodeData[,nattrib]
newNodeData[,-nattrib]
newNodeData[,-quote(nattrib)]
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
addNodeGroupFormat(L, group=c("I","II"), fillcolor="yellow", shape=c("rectangle","ellipse"))
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
addNodeGroupFormat(L, group=c("I","II"), fillcolor="yellow", shape=c("rectangle","ellipse"))
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
addNodeGroupFormat(L, group=c("I","II"), fillcolor="yellow", shape=c("rectangle","ellipse"))
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
addNodeGroupFormat(L, group=c("I","II"), fillcolor="yellow", shape=c("box","ellipse"))
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
L$nodes
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- addNodeDataToCLD(L, ndat)
addNodeGroupFormat(L, group=c("I","II"), fillcolor="yellow", shape=c("box","ellipse"))
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- L %>% addNodeDataToCLD(L, ndat) %>%
addNodeGroupFormat(L, group=c("I","II"),
fillcolor="yellow", shape=c("box","ellipse"))
ndat
is.data.frame(ndat)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- L %>% addNodeDataToCLD(L, ndat)
class(ndat)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- L %>% addNodeDataToCLD(ndat) %>%
addNodeGroupFormat(group=c("I","II"), fillcolor="yellow",
shape=c("box","ellipse"))
L
L %>% addNodeGroupFormat(group=c("I","II"), fillcolor="yellow", shape=c("box","ellipse"))
L
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- L %>% addNodeDataToCLD(ndat) %>%
addNodeGroupFormat(group=c("I","II"), fillcolor="yellow",
shape=c("box","ellipse"))
L %>% addNodeGroupFormat(group=c("I","II"), fillcolor="yellow", shape=c("box","ellipse"))
L
CLD <- L
L$formats$node$group
group <- c("I","II")
any(group %in% names(CLD$formats$node$group))
group %in% names(CLD$formats$node$group)
group
CLD$formats$node$group
setdiff(group, names(CLD$formats$node$group))
intersect(group, names(CLD$formats$node$group))
group
str(group)
str(names(CLD$formats$node$group))
names(CLD$formats$node$group)
CLD <- L
any(group %in% CLD$formats$node$group)
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- L %>% addNodeDataToCLD(ndat) %>%
addNodeGroupFormat(group=c("I","II"), fillcolor="yellow",
shape=c("box","ellipse"))
L
L %>% addNodeGroupFormat(group=c("I","II"), fillcolor="yellow", shape=c("box","ellipse"))
roxygen2::roxygenize()
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- L %>%
addNodeData(ndat) %>%
addNodeGroupFormat(group=c("I","II"), fillcolor="yellow",
shape=c("box","ellipse"))
L
all(!duplicated(1:5))
all(!duplicated(c(1,1:3)))
roxygen2::roxygenize()
library(causalloop)
roxygen2::roxygenize()
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
library(tibble)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- L %>%
addNodeData(ndat) %>%
addNodeGroup(group=c("I","II"), fillcolor="yellow", shape=c("box","ellipse"))
library(magrittr)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L <- L %>%
addNodeData(ndat) %>%
addNodeGroup(group=c("I","II"), fillcolor="yellow", shape=c("box","ellipse"))
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L %>%
addNodeData(ndat)
ndat
L
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L %>%
addNodeData(ndat)
library(dplyr)
library(causalloop)
L <- CLD(from=c("a","a","c","c","d"), to=c("b","c","a","d","a"))
ndat <- tibble(node=c("c","d","e","f"), group=c("I"," ","II","I"))
L %>%
addNodeData(ndat)
roxygen2::roxygenize()
