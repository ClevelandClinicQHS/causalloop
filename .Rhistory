g <- DiagrammeR::create_graph(nodes_df=ndf, edges_df=edf)
render_graph(g, layout="neato")
?DiagrammR::render_graph
?DiagrammeR::render_graph
g <- DiagrammeR::create_graph(nodes_df=ndf, edges_df=edf)
render_graph(g, layout="circle")
render_graph(g, layout="tree")
render_graph(g, layout="kk")
render_graph(g, layout="fr")
g <- DiagrammeR::create_graph(nodes_df=ndf, edges_df=edf)
render_graph(g, layout="nicely")
library(causalloop)
CLD(from=c("a","a","b","c","d"), to=c("b","c","a","d","b"),
polarity=c(1,1,-1,-1,1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red") %>%
plot()
L <- CLD(from=c("a","a","b","c","d"), to=c("b","c","a","d","b"),
polarity=c(1,1,-1,-1,1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", fillcolor="yellow") %>%
plot()
L
L
L <- CLD(from=c("a","a","b","c","d"), to=c("b","c","a","d","b"),
polarity=c(1,1,-1,-1,1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", fillcolor="yellow")
L
L <- CLD(from=c("a","a","b","c","d"), to=c("b","c","a","d","b"),
polarity=c(1,1,-1,-1,1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", color="yellow")
L
L <- CLD(from=c("a","a","b","c","d"), to=c("b","c","a","d","b"),
polarity=c(1,1,-1,-1,1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", color="yellow")
plot(L)
nodes <- "c"
CLD <- L
any(!(nodes %in% CLD$nodes$node))
nodes <- "e"
any(!(nodes %in% CLD$nodes$node))
nodes <- c("c","e")
any(!(nodes %in% CLD$nodes$node))
warning(paste("The following nodes were not in the CLD:\n     ",
paste0(setdiff(nodes, CLD$nodes$node),
collapse="\n     ")))
nodes <- nodes[nodes %in% CLD$nodes$node]
warning(paste("The following nodes were not in the CLD:\n     '",
paste0(setdiff(nodes, CLD$nodes$node),
collapse="'\n     '")), "'")
nodes <- nodes[nodes %in% CLD$nodes$node]
nodes <- c("e","b","a","g")
any(!(nodes %in% CLD$nodes$node))
warning(paste("The following nodes were not in the CLD:\n     '",
paste0(setdiff(nodes, CLD$nodes$node),
collapse="'\n     '")), "'")
nodes <- nodes[nodes %in% CLD$nodes$node]
nodes <- c("e","b","a","g")
warning(paste0("The following nodes were not in the CLD:\n     '",
paste0(setdiff(nodes, CLD$nodes$node),
collapse="'\n     '")), "'")
nodes <- nodes[nodes %in% CLD$nodes$node]
nodes
steps=1
is.integer(steps) & length(steps)==1
is.numeric(steps) & length(steps)==1
floor(1.7)
str(floor(1.7))
L <- CLD(from=c("a","a","b","c","d"), to=c("b","c","a","d","b"),
polarity=c(1,1,-1,-1,1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", color="yellow")
L
CLD <- L; nodes <- c("c","e","q"); steps=1;
stopifnot(class(CLD) == "CLD")
#first, make sure all nodes in the edges table are in the nodes table
if(!allEdfNodesListedInNdf(CLD)){
stop("CLD$edges$from/CLD$edges$to contain nodes that are absent in CLD$nodes.")
}
if(!all(CLD$nodes$group %in% CLD$formats$node$group)){
zz <- setdiff(CLD$nodes$group, CLD$formats$node$group)
stop(paste0("Node group(s) '", paste(zz, collapse="', '"),
"' do not exist. Use addNodeGroup()."))
}
#map node data to what DiagrammeR wants (integer node IDs)
ndf <- DiagrammeR::create_node_df(n     = nrow(CLD$nodes),
type  = CLD$nodes$group,
label = CLD$nodes$node)
nodeFmtData <- CLD$formats$node %>% rename(type=group)
ndf  <- left_join(ndf, nodeFmtData, by="type")
nodeIDs <- ndf %>% select(id,label)
edf <- CLD$edges %>%
left_join(CLD$formats$edge, by="polarity") %>%
rename(label=from) %>%
left_join(nodeIDs, by="label") %>%
select(-label) %>%
rename(from=id, label=to) %>%
left_join(nodeIDs, by="label") %>%
select(-label) %>%
rename(to=id)
edf <- DiagrammeR::create_edge_df(from      = edf$from,
to        = edf$to,
polarity  = edf$polarity,
style     = edf$style,
color     = edf$color,
arrowhead = edf$arrowhead,
penwidth  = edf$penwidthAdj*edf$weight)
ndf
edf
any(!(nodes %in% CLD$nodes$node))
warning(paste0("The following nodes were not in the CLD:\n     '",
paste0(setdiff(nodes, CLD$nodes$node),
collapse="'\n     '")), "'")
nodes <- nodes[nodes %in% CLD$nodes$node]
nodes
warning(paste0("The following nodes were not in the CLD",
"and will be ignored:\n     '",
paste0(setdiff(nodes, CLD$nodes$node),
collapse="'\n     '")), "'")
if(length(nodes)==0) stop("No nodes present in the CLD!")
nodes
stopifnot(is.numeric(steps) & length(steps)==1)
steps <- floor(steps)
steps
edf
if(steps>0)  for(i in 1:steps) {
inNodes  <- unique(c(inNodes, edf$from[which(edf$to %in% inNodes)]))
outNodes <- unique(c(outNodes, edf$from[which(edf$to %in% outNodes)]))
}
inNodes <- outNodes <- origNodes <- nodes
if(steps>0)  for(i in 1:steps) {
inNodes  <- unique(c(inNodes, edf$from[which(edf$to %in% inNodes)]))
outNodes <- unique(c(outNodes, edf$from[which(edf$to %in% outNodes)]))
}
inNodes
outNodes
i
origNodes
edf
ndf
nodes <- ndf$id[ndf$label %in% nodes]
nodes
inNodes <- outNodes <- origNodes <- nodes
if(steps>0)  for(i in 1:steps) {
inNodes  <- unique(c(inNodes, edf$from[which(edf$to %in% inNodes)]))
outNodes <- unique(c(outNodes, edf$from[which(edf$to %in% outNodes)]))
}
inNodes
outNodes
edf
inNodes <- outNodes <- origNodes <- nodes
if(steps>0)  for(i in 1:steps) {
inNodes  <- unique(c(inNodes, edf$from[which(edf$to %in% inNodes)]))
outNodes <- unique(c(outNodes, edf$to[which(edf$from %in% outNodes)]))
}
inNodes
outNodes
ndf
edf
nodes <- unique(c(inNodes,outNodes))
ndf %>% filter(id %in% nodes)
edf %>% filter(from %in% nodes & to %in% nodes)
origNodes
nodes <- c("c","f","h","arf")
if(any(!(nodes %in% CLD$nodes$node))){
warning(paste0("The following nodes were not in the CLD ",
"and will be ignored:\n     '",
paste0(setdiff(nodes, CLD$nodes$node),
collapse="'\n     '")), "'")
nodes <- nodes[nodes %in% CLD$nodes$node]
}
if(length(nodes)==0) stop("No nodes present in the CLD!")
nodes <- ndf$id[ndf$label %in% nodes]  #map nodes to node indices
stopifnot(is.numeric(steps) & length(steps)==1)
steps <- floor(steps)
inNodes <- outNodes <- origNodes <- nodes
if(steps>0)  for(i in 1:steps) {
inNodes  <- unique(c(inNodes, edf$from[which(edf$to %in% inNodes)]))
outNodes <- unique(c(outNodes, edf$to[which(edf$from %in% outNodes)]))
}
nodes <- unique(c(inNodes,outNodes))
ndf <- ndf %>% filter(id %in% nodes)
edf <- edf %>% filter(from %in% nodes & to %in% nodes)
ix <- which(!(edf$from %in% origNodes) & !(edf$to %in% origNodes))
if(recolor & length(ix)>0) edf$color[ix] <- "gray70"
recolor=TRUE
ix
edf
if(recolor & length(ix)>0) edf$color[ix] <- "gray70"
L <- CLD(from=c("a","a","b","c","d","d"), to=c("b","c","a","d","b","a"),
polarity=c(1,1,-1,-1,1,-1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", color="yellow")
nodes
nodes <- c("c","f","h","arf")
is.null(nodes)
stopifnot(class(CLD) == "CLD")
#first, make sure all nodes in the edges table are in the nodes table
if(!allEdfNodesListedInNdf(CLD)){
stop("CLD$edges$from/CLD$edges$to contain nodes that are absent in CLD$nodes.")
}
if(!all(CLD$nodes$group %in% CLD$formats$node$group)){
zz <- setdiff(CLD$nodes$group, CLD$formats$node$group)
stop(paste0("Node group(s) '", paste(zz, collapse="', '"),
"' do not exist. Use addNodeGroup()."))
}
#map node data to what DiagrammeR wants (integer node IDs)
ndf <- DiagrammeR::create_node_df(n     = nrow(CLD$nodes),
type  = CLD$nodes$group,
label = CLD$nodes$node)
nodeFmtData <- CLD$formats$node %>% rename(type=group)
ndf  <- left_join(ndf, nodeFmtData, by="type")
nodeIDs <- ndf %>% select(id,label)
edf <- CLD$edges %>%
left_join(CLD$formats$edge, by="polarity") %>%
rename(label=from) %>%
left_join(nodeIDs, by="label") %>%
select(-label) %>%
rename(from=id, label=to) %>%
left_join(nodeIDs, by="label") %>%
select(-label) %>%
rename(to=id)
edf <- DiagrammeR::create_edge_df(from      = edf$from,
to        = edf$to,
polarity  = edf$polarity,
style     = edf$style,
color     = edf$color,
arrowhead = edf$arrowhead,
penwidth  = edf$penwidthAdj*edf$weight)
nodes
L
CLD <- L
stopifnot(class(CLD) == "CLD")
#first, make sure all nodes in the edges table are in the nodes table
if(!allEdfNodesListedInNdf(CLD)){
stop("CLD$edges$from/CLD$edges$to contain nodes that are absent in CLD$nodes.")
}
if(!all(CLD$nodes$group %in% CLD$formats$node$group)){
zz <- setdiff(CLD$nodes$group, CLD$formats$node$group)
stop(paste0("Node group(s) '", paste(zz, collapse="', '"),
"' do not exist. Use addNodeGroup()."))
}
#map node data to what DiagrammeR wants (integer node IDs)
ndf <- DiagrammeR::create_node_df(n     = nrow(CLD$nodes),
type  = CLD$nodes$group,
label = CLD$nodes$node)
nodeFmtData <- CLD$formats$node %>% rename(type=group)
ndf  <- left_join(ndf, nodeFmtData, by="type")
nodeIDs <- ndf %>% select(id,label)
edf <- CLD$edges %>%
left_join(CLD$formats$edge, by="polarity") %>%
rename(label=from) %>%
left_join(nodeIDs, by="label") %>%
select(-label) %>%
rename(from=id, label=to) %>%
left_join(nodeIDs, by="label") %>%
select(-label) %>%
rename(to=id)
edf <- DiagrammeR::create_edge_df(from      = edf$from,
to        = edf$to,
polarity  = edf$polarity,
style     = edf$style,
color     = edf$color,
arrowhead = edf$arrowhead,
penwidth  = edf$penwidthAdj*edf$weight)
(is.null(nodes)
)
if(any(!(nodes %in% CLD$nodes$node))){
warning(paste0("The following nodes were not in the CLD ",
"and will be ignored:\n     '",
paste0(setdiff(nodes, CLD$nodes$node),
collapse="'\n     '")), "'")
nodes <- nodes[nodes %in% CLD$nodes$node]
}
nodes
if(length(nodes)==0) stop("No nodes present in the CLD!")
nodes <- ndf$id[ndf$label %in% nodes]  #map nodes to node indices
nodes
stopifnot(is.numeric(steps) & length(steps)==1)
steps <- floor(steps)
steps
inNodes <- outNodes <- origNodes <- nodes
if(steps>0)  for(i in 1:steps) {
inNodes  <- unique(c(inNodes, edf$from[which(edf$to %in% inNodes)]))
outNodes <- unique(c(outNodes, edf$to[which(edf$from %in% outNodes)]))
}
inNodes
outNodes
origNodes
nodes <- unique(c(inNodes,outNodes))
ndf <- ndf %>% filter(id %in% nodes)
edf <- edf %>% filter(from %in% nodes & to %in% nodes)
ix <- which(!(edf$from %in% origNodes) & !(edf$to %in% origNodes))
if(recolor & length(ix)>0) edf$color[ix] <- "gray70"
edf
ndf
g <- DiagrammeR::create_graph(nodes_df=ndf, edges_df=edf)
render_graph(g, layout="nicely")
roxygen2::roxygenize()
library(causalloop)
L <- CLD(from=c("a","a","b","c","d","d"), to=c("b","c","a","d","b","a"),
polarity=c(1,1,-1,-1,1,-1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", color="yellow")
plot(L)
plot(L, nodes=c("c","e","f"))
roxygen2::roxygenize()
library(causalloop)
L <- CLD(from=c("a","a","b","c","d","d"), to=c("b","c","a","d","b","a"),
polarity=c(1,1,-1,-1,1,-1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", color="yellow")
plot(L)
plot(L, nodes=c("c","e","f"))
L <- CLD(from=c("a","a","b","c","d","d"), to=c("b","c","a","d","b","a"),
polarity=c(1,1,-1,-1,1,-1)) %>%
addNodeData(tibble(node="c", group="core"))
plot(L)
plot(L, nodes=c("c","e","f"))
L <- CLD(from=c("a","a","b","c","d","d"), to=c("b","c","a","d","b","a"),
polarity=c(1,1,-1,-1,1,-1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", color="yellow")
plot(L)
plot(L, nodes=c("c","e","f"))
plot(L, nodes=c("c","e","f"), steps=2)
plot(L, nodes=c("c","e","f"))
library(causalloop)
L <- CLD(from=c("a","a","b","c","d","d"), to=c("b","c","a","d","b","a"),
polarity=c(1,1,-1,-1,1,-1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", color="yellow")
plot(L)
plot(L, nodes=c("c","e","f"))
L
library(causalloop)
L <- CLD(from=c("a","a","b","c","d","d"), to=c("b","c","a","d","b","a"),
polarity=c(1,1,-1,-1,1,-1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", color="yellow")
plot(L)
plot(L, nodes=c("c","e","f"))
library(causalloop)
L <- CLD(from=c("a","a","b","c","d","d"), to=c("b","c","a","d","b","a"),
polarity=c(1,1,-1,-1,1,-1)) %>%
addNodeData(tibble(node="c", group="core")) %>%
addNodeGroup("core", fontcolor="red", color="yellow")
plot(L)
plot(L, nodes=c("c","e","f"))
roxygen2::roxygenize()
library(causalloop)
library(causalloop)
library(googlesheets)
key <- "1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4"
gsk <- gs_key(key)
d <- gs_read(ws="Relationships")
?gs_read
d <- gs_read(ss=gsk, ws="Relationships")
d <- gs_read(ss=gsk, ws="relationships")
d
g <- edf2CLD(d)
g
plot(g)
library(tidyverse)
plot(g)
library(causalloop)
library(causalloop)
library(tidyverse)
library(googlesheets)
g <- edf2CLD(d)
plot(g)
plot(g, nodes=c("Daily Intake", "Neighborhood Disadvantage"))
library(causalloop)
library(tidyverse)
library(googlesheets)
key <- "1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4"
gsk <- gs_key(key)
d <- gs_read(ss=gsk, ws="relationships")
g <- edf2CLD(d)
?DiagrammeR::set_global_graph_attrs
get_global_graph_attrs(g)
DiagrammeR::get_global_graph_attrs(g)
g <- DiagrammeR::create_graph(nodes_df=ndf, edges_df=edf) %>%
DiagrammeR::set_global_graph_attrs(attr="overlap", value="false", attr_type="graph")
#' @name plot.CLD
#' @aliases plot.CLD plotCLD
#' @export
#' @method plot CLD
#'
#' @title Plot a causal loop diagram object
#' @description Causal loop diagrams are generated through an interface to the
#'   \code{DiagrammeR} package. Node and edge characteristics can be modified directly
#'   by manipulating the CLD object or by using functions \code{setEdgeFormat()} and
#'   \code{setNodeFormat()}.
#'
#' @param CLD an object of class \code{CLD}
#'
#' @details See 'Sources' for links to additional documentation from the
#'   \code{DiagrammeR} package and the GraphViz website.
#'
#' @author Jarrod Dalton
#'
#' @source
#'   \url{http://rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html}\cr
#'   See especially the section on Attributes
#'
#'   \url{http://graphviz.org/}\cr
#'   \url{http://graphviz.org/content/attrs}
#'
#' @examples
#' \dontrun{
#' #* Plots may open in a browser.
#' L <- CLD(from=c("a","a","b","c","d","d"), to=c("b","c","a","d","b","a"),
#'            polarity=c(1,1,-1,-1,1,-1)) %>%
#'   addNodeData(tibble(node="c", group="core")) %>%
#'   addNodeGroup("core", fontcolor="red", color="yellow")
#' plot(L)
#' plot(L, nodes=c("c","e","f"))
#' }
plot.CLD <- function(CLD, nodes=NULL, steps = 1, recolor=TRUE) {
stopifnot(class(CLD) == "CLD")
#first, make sure all nodes in the edges table are in the nodes table
if(!allEdfNodesListedInNdf(CLD)){
stop("CLD$edges$from/CLD$edges$to contain nodes that are absent in CLD$nodes.")
}
if(!all(CLD$nodes$group %in% CLD$formats$node$group)){
zz <- setdiff(CLD$nodes$group, CLD$formats$node$group)
stop(paste0("Node group(s) '", paste(zz, collapse="', '"),
"' do not exist. Use addNodeGroup()."))
}
#map node data to what DiagrammeR wants (integer node IDs)
ndf <- DiagrammeR::create_node_df(n     = nrow(CLD$nodes),
type  = CLD$nodes$group,
label = CLD$nodes$node)
nodeFmtData <- CLD$formats$node %>% rename(type=group)
ndf  <- left_join(ndf, nodeFmtData, by="type")
nodeIDs <- ndf %>% select(id,label)
edf <- CLD$edges %>%
left_join(CLD$formats$edge, by="polarity") %>%
rename(label=from) %>%
left_join(nodeIDs, by="label") %>%
select(-label) %>%
rename(from=id, label=to) %>%
left_join(nodeIDs, by="label") %>%
select(-label) %>%
rename(to=id)
edf <- DiagrammeR::create_edge_df(from      = edf$from,
to        = edf$to,
polarity  = edf$polarity,
style     = edf$style,
color     = edf$color,
arrowhead = edf$arrowhead,
penwidth  = edf$penwidthAdj*edf$weight)
if(!is.null(nodes)){
if(any(!(nodes %in% CLD$nodes$node))){
warning(paste0("The following nodes were not in the CLD ",
"and will be ignored:\n     '",
paste0(setdiff(nodes, CLD$nodes$node),
collapse="'\n     '")), "'")
nodes <- nodes[nodes %in% CLD$nodes$node]
}
if(length(nodes)==0) stop("No nodes present in the CLD!")
nodes <- ndf$id[ndf$label %in% nodes]  #map nodes to node indices
stopifnot(is.numeric(steps) & length(steps)==1)
steps <- floor(steps)
inNodes <- outNodes <- origNodes <- nodes
if(steps>0)  for(i in 1:steps) {
inNodes  <- unique(c(inNodes, edf$from[which(edf$to %in% inNodes)]))
outNodes <- unique(c(outNodes, edf$to[which(edf$from %in% outNodes)]))
}
nodes <- unique(c(inNodes,outNodes))
ndf <- ndf %>% filter(id %in% nodes)
edf <- edf %>% filter(from %in% nodes & to %in% nodes)
ix <- which(!(edf$from %in% origNodes) & !(edf$to %in% origNodes))
if(recolor & length(ix)>0) edf$color[ix] <- "gray70"
}
g <- DiagrammeR::create_graph(nodes_df=ndf, edges_df=edf) %>%
DiagrammeR::set_global_graph_attrs(attr      = "overlap",
value     = "false",
attr_type = "graph")
DiagrammeR::render_graph(g)
}
library(causalloop)
library(tidyverse)
library(googlesheets)
key <- "1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4"
gsk <- gs_key(key)
d <- gs_read(ss=gsk, ws="relationships")
g <- edf2CLD(d)
plot(g)
library(causalloop)
library(causalloop)
library(tidyverse)
library(googlesheets)
key <- "1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4"
gsk <- gs_key(key)
d <- gs_read(ss=gsk, ws="relationships")
g <- edf2CLD(d)
plot(g)
roxygen2::roxygenize()
library(causalloop)
library(causalloop)
library(tidyverse)
library(googlesheets)
key <- "1r3-ayWgAOE2LjVzHbQxM-CwLCx_xLoUu1ZqY4ppStS4"
gsk <- gs_key(key)
d <- gs_read(ss=gsk, ws="relationships")
g <- edf2CLD(d)
plot(g)
